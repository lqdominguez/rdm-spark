package net.sf.jclec.syntaxtree;

import org.apache.commons.lang.builder.EqualsBuilder;

/**
 * Non terminal node (containing a non-terminal symbol) in a syntax tree.
 * 
 * Non terminal nodes contain a reference to a String [], representing the 
 * production rule that is being applying.
 * 
 * @author Sebastian Ventura
 */

public class NonTerminalNode extends SyntaxTreeNode 
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////

	/** Generated by Eclipse */

	private static final long serialVersionUID = 6125883112520878113L;
	
	/////////////////////////////////////////////////////////////////
	// --------------------------------------------------- Properties
	/////////////////////////////////////////////////////////////////
	
	/** Production attached to this node */
	
	protected String [] production;
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////

	/**
	 * Empty constructor.
	 */
	
	public NonTerminalNode() 
	{
		super();
	}

	/**
	 * Constructor that sets symbol and production.
	 * 
	 * @param symbolName Symbol name 
	 * @param production Symbol production
	 */
	
	public NonTerminalNode(String symbolName, String [] production) 
	{
		super(symbolName);
		setProduction(production);
	}

	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////

	// Setting and getting production rule
	
	/**
	 * Access to production attached to this node
	 * 
	 * @return Production attached to this node
	 */
	
	public String[] getProduction() 
	{
		return production;
	}

	/**
	 * Set the production rule attached to this node
	 * 
	 * @param production Production attached to this node
	 */
	
	public void setProduction(String[] production) 
	{
		this.production = production;
	}
	
	// SyntaxTreeNode methods

	/**
	 * @return production.length
	 */
	
	@Override
	public final int arity() 
	{
		return production.length;
	}
	
	/**
	 * Default implementation of this method return this, but sometimes 
	 * you should overwrite method.
	 * 
	 * @return this
	 */
	
	@Override
	public SyntaxTreeNode instance() 
	{
		return this;
	}

	/**
	 * Default implementation of this method return this, but sometimes 
	 * you should overwrite method.
	 * 
	 * @return this
	 */
	
	@Override
	public SyntaxTreeNode copy() 
	{
		return this;
	}

	// java.lang.Object methods

	@Override
	public boolean equals(Object other)
	{
		if (other instanceof NonTerminalNode) {
			NonTerminalNode cother = (NonTerminalNode) other;
			EqualsBuilder eb = new EqualsBuilder();
			eb.append(symbol, cother.symbol);
			eb.append(production, cother.production);
			return eb.isEquals();
		}
		else {
			return false;
		}
	}
}
