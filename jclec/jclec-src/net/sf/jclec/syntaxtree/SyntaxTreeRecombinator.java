package net.sf.jclec.syntaxtree;

import net.sf.jclec.ISpecies;
import net.sf.jclec.IConfigure;

import net.sf.jclec.base.AbstractRecombinator;

import org.apache.commons.configuration.Configuration;
import org.apache.commons.configuration.ConfigurationRuntimeException;

/**
 * Recombinator for SyntaxTreeIndividuals and its subclasses.
 * 
 * @author Sebastian Ventura
 */

public class SyntaxTreeRecombinator extends AbstractRecombinator implements IConfigure 
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////

	/** Generated by Eclipse */

	private static final long serialVersionUID = 5597963000114578170L;

	/////////////////////////////////////////////////////////////////
	// --------------------------------------------------- Properties
	/////////////////////////////////////////////////////////////////

	/** Base operation for this expression tree mutator */
	
	protected IRecombineSyntaxTree baseOp;
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------- Internal variables
	/////////////////////////////////////////////////////////////////

	/** Individual species */
	
	protected transient SyntaxTreeSpecies species;

	/** Individual species */
	
	protected transient SyntaxTreeSchema schema;

	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////

	/**
	 * Empty (default) constructor
	 */
	
	public SyntaxTreeRecombinator() 
	{
		super();
	}

	/////////////////////////////////////////////////////////////////
	// ---------------------------------------------- Public  methods
	/////////////////////////////////////////////////////////////////

	public IRecombineSyntaxTree getBaseOp() 
	{
		return baseOp;
	}

	public void setBaseOp(IRecombineSyntaxTree baseOp) 
	{
		this.baseOp = baseOp;
	}
	
	@Override
	@SuppressWarnings("unchecked")
	public void configure(Configuration settings) 
	{
		// Set base recombinator name
		try {
			// Base recombinator classname
			String baseOpClassname = 
				settings.getString("base-op[@type]");
			// Evaluator class
			Class<? extends IRecombineSyntaxTree> baseOpClass = 
				(Class<? extends IRecombineSyntaxTree>) Class.forName(baseOpClassname);
			// Evaluator instance
			IRecombineSyntaxTree baseOp = baseOpClass.newInstance();
			// Configure species
			if (baseOp instanceof IConfigure) {
				((IConfigure) baseOp).configure(settings.subset("base-op"));
			}
			// Set species
			setBaseOp(baseOp);
		} 
		catch (ClassNotFoundException e) {
			throw new ConfigurationRuntimeException("Illegal operator classname");
		} 
		catch (InstantiationException e) {
			throw new ConfigurationRuntimeException("Problems creating an instance of operator", e);
		} 
		catch (IllegalAccessException e) {
			throw new ConfigurationRuntimeException("Problems creating an instance of operator", e);
		}
	}

	/////////////////////////////////////////////////////////////////
	// -------------------------------------------- Protected methods
	/////////////////////////////////////////////////////////////////

	// AbstractRecombinator methods

	@Override
	protected void setPpl() 
	{
		ppl = 2;
	}

	@Override
	protected void setSpl() 
	{
		spl = 2;
	}

	@Override
	protected void prepareRecombination() 
	{
		ISpecies species = context.getSpecies();
		if (species instanceof SyntaxTreeSpecies) {
			// Type conversion 
			this.species = (SyntaxTreeSpecies) species;
			// Sets genotype schema
			this.schema = ((SyntaxTreeSpecies) species).getGenotypeSchema();
		}
		else {
			throw new IllegalStateException("Invalid species in context");
		}
	}
	
	@Override
	protected void recombineNext() 
	{
		// Parents genotypes
		SyntaxTree p0_genotype = 
			((SyntaxTreeIndividual) parentsBuffer.get(parentsCounter)).getGenotype();
		SyntaxTree p1_genotype = 
			((SyntaxTreeIndividual) parentsBuffer.get(parentsCounter+1)).getGenotype();

		// Sons genotypes
		SyntaxTree s0_genotype = new SyntaxTree(); 
		SyntaxTree s1_genotype = new SyntaxTree();
		// Fill sons
		baseOp.recombine(p0_genotype, p1_genotype, s0_genotype, s1_genotype, schema, randgen);
		// Add sons
		sonsBuffer.add(species.createIndividual(s0_genotype));
		sonsBuffer.add(species.createIndividual(s1_genotype));
	}
}
