package net.sf.jclec.syntaxtree;

import net.sf.jclec.ISpecies;

import net.sf.jclec.base.AbstractCreator;

/**
 * SyntaxTreeIndividual (and subclasses) creator.
 * 
 * @author Sebastian Ventura
 */

public class SyntaxTreeCreator extends AbstractCreator 
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////

	/** Generated by Eclipse */
	
	private static final long serialVersionUID = 1656008967644548798L;

	/////////////////////////////////////////////////////////////////
	// ------------------------------------------- Internal variables
	/////////////////////////////////////////////////////////////////

	/** Individual species */
	
	protected transient SyntaxTreeSpecies species;

	/** Individuals schema */
	
	protected transient SyntaxTreeSchema schema;

	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////

	/**
	 * Empty constructor
	 */
	
	public SyntaxTreeCreator() 
	{
		super();
	}

	/////////////////////////////////////////////////////////////////
	// ------------------------- Overwriting java.lang.Object methods
	/////////////////////////////////////////////////////////////////

	public boolean equals(Object other)
	{
		if (other instanceof SyntaxTreeCreator) {
			return true;			
		}
		else {
			return false;
		}
	}
	
	/////////////////////////////////////////////////////////////////
	// -------------------------- Overwriting AbstractCreator methods
	/////////////////////////////////////////////////////////////////

	@Override
	protected void prepareCreation() 
	{
		ISpecies species = context.getSpecies();
		if (species instanceof SyntaxTreeSpecies) {
			// Type conversion 
			this.species = (SyntaxTreeSpecies) species;
			// Sets genotype schema
			this.schema = ((SyntaxTreeSpecies) species).getGenotypeSchema();
		}
		else {
			throw new IllegalStateException("Invalid species in context");
		}
	}

	@Override
	protected void createNext() 
	{
		SyntaxTree genotype = new SyntaxTree();
		int actDerivSize = randgen.choose(schema.getMinDerivSize(), schema.getMaxDerivSize());
		genotype = schema.createSyntaxTree(actDerivSize, randgen);
		createdBuffer.add(species.createIndividual(genotype));
	}
}
