package net.sf.jclec.syntaxtree;

import net.sf.jclec.exprtree.IPrimitive;

import org.apache.commons.lang.builder.EqualsBuilder;

/**
 * Terminal node in a context-free grammar.
 * 
 * Terminal contains a reference to an IPrimitive object, representing the code
 * to execute.
 * 
 * @author Sebastian Ventura
 */

public class TerminalNode extends SyntaxTreeNode 
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////
	
	/** Generated by Eclipse */
	
	private static final long serialVersionUID = 4962848603107999909L;
	
	/////////////////////////////////////////////////////////////////
	// --------------------------------------------------- Properties
	/////////////////////////////////////////////////////////////////
	
	protected IPrimitive code;
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////

	/**
	 * Empty constructor
	 */
	
	public TerminalNode() 
	{
		super();
	}

	/**
	 * Copy constructor. Sets the name and the code of the node
	 * 
	 * @param name Symbol name of the node
	 * @param code Code associated to this node
	 */
	
	public TerminalNode(String name, IPrimitive code) 
	{
		super(name);
		this.code = code;
	}

	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////

	// Setting and getting code
	
	/**
	 * Access to code.
	 * 
	 * @return code
	 */
	
	public IPrimitive getCode()
	{
		return code;
	}

	/**
	 * Set the code for this node.
	 * 
	 * @param code New code
	 */
	
	public void setCode(IPrimitive code) 
	{
		this.code = code;
	}

	// SyntaxTreeNode methods

	@Override
	
	/**
	 * {@inheritDoc}
	 * 
	 * @return 0  
	 */
	
	public final int arity() 
	{
		return 0;
	}
	
	/**
	 * {@inheritDoc}
	 */

	@Override
	public SyntaxTreeNode instance() 
	{
		return new TerminalNode(symbol, code.instance());
	}

	/**
	 * {@inheritDoc}
	 */

	@Override
	public SyntaxTreeNode copy() 
	{
		return new TerminalNode(symbol, code.copy());
	}

	// java.lang.Object methods

	/**
	 * {@inheritDoc}
	 */
	
	public boolean equals(Object other)
	{
		if (other instanceof TerminalNode) {
			TerminalNode cother = (TerminalNode) other;
			EqualsBuilder eb = new EqualsBuilder();
			eb.append(symbol, cother.symbol);
			eb.append(code, cother.code);
			return eb.isEquals();
		}
		else {
			return false;
		}
	}
}
