package net.sf.jclec.multisyntaxtree;

import net.sf.jclec.IFitness;
import net.sf.jclec.IIndividual;

import net.sf.jclec.base.AbstractIndividual;

import net.sf.jclec.syntaxtree.SyntaxTree;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * Individual that presents multiple syntax trees as genotype.
 * 
 * @author Sebastian Ventura
 */

@SuppressWarnings("deprecation")
public class MultiSyntaxTreeIndividual extends AbstractIndividual<SyntaxTree []> 
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////

	/** Generated by Eclipse */
	
	private static final long serialVersionUID = -2339079985634157433L;

	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////

	/**
	 * Empty constructor.
	 */
	
	public MultiSyntaxTreeIndividual() 
	{
		super();
	}

	/**
	 * Constructor that sets individual genotype.
	 * 
	 * @param genotype Individual genotype
	 */
	
	public MultiSyntaxTreeIndividual(SyntaxTree [] genotype) 
	{
		super(genotype);
	}

	/**
	 * Constructor that sets individual genotype and fitness
	 * 
	 * @param genotype Individual genotype
	 * @param fitness  Individual fitness
	 */
	
	public MultiSyntaxTreeIndividual(SyntaxTree [] genotype, IFitness fitness) 
	{
		super(genotype, fitness);
	}

	/////////////////////////////////////////////////////////////////
	// --------------------------- Implementing IIndividual interface
	/////////////////////////////////////////////////////////////////

	/**
	 * {@inheritDoc}
	 */

	public double distance(IIndividual other) 
	{
		// TODO Implement a syntax tree distance
		return 0;
	}

	/**
	 * {@inheritDoc}
	 */
	
	public IIndividual copy() 
	{
		int gl = genotype.length;
		SyntaxTree [] genotypeCopy = new SyntaxTree[gl];
		for (int i=0; i<gl; i++) {
			genotypeCopy[i] = genotype[i].copy();
		}
		return new MultiSyntaxTreeIndividual(genotypeCopy);
	}
	
	/////////////////////////////////////////////////////////////////
	// ------------------------- Overwriting java.lang.Object methods
	/////////////////////////////////////////////////////////////////
	
	/**
	 * {@inheritDoc}
	 */
	
	@Override
	public boolean equals(Object other) 
	{
		if (other instanceof MultiSyntaxTreeIndividual) {
			MultiSyntaxTreeIndividual cother = (MultiSyntaxTreeIndividual) other;
			EqualsBuilder eb = new EqualsBuilder();
			eb.append(genotype, cother.genotype);
			return eb.isEquals();
		}
		else {
			return false;
		}
	}
	
	/**
	 * {@inheritDoc}
	 */
	
	@Override
	public String toString()
	{
		ToStringBuilder tsb = new ToStringBuilder(this);
		tsb.append("genotype", genotype);
		tsb.append("fitness", fitness);
		return tsb.toString();
	}
}
