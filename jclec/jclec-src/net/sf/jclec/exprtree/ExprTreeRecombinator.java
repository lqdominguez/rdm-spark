package net.sf.jclec.exprtree;

import net.sf.jclec.ISpecies;
import net.sf.jclec.IConfigure;

import net.sf.jclec.base.AbstractRecombinator;

import org.apache.commons.configuration.Configuration;
import org.apache.commons.configuration.ConfigurationRuntimeException;

/**
 * Recombinator for ExprTreeIndividual (and its subclasses).
 * 
 * @author Sebastian Ventura
 */

public class ExprTreeRecombinator extends AbstractRecombinator implements IConfigure
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////

	/** Generated by Eclipse */

	private static final long serialVersionUID = -964619066855184640L;

	/////////////////////////////////////////////////////////////////
	// --------------------------------------------------- Properties
	/////////////////////////////////////////////////////////////////

	/** Base operation for this expression tree mutator */
	
	protected IRecombineExprTree baseOp;
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------- Internal variables
	/////////////////////////////////////////////////////////////////

	/** Individual species */
	
	protected transient ExprTreeSpecies species;
	
	/** Individuals schema */
	
	protected transient ExprTreeSchema schema;
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////

	/**
	 * Empty constructor
	 */
	
	public ExprTreeRecombinator() 
	{
		super();
	}

	/////////////////////////////////////////////////////////////////
	// ---------------------------------------------- Public  methods
	/////////////////////////////////////////////////////////////////

	public IRecombineExprTree getBaseOp() 
	{
		return baseOp;
	}

	public void setBaseOp(IRecombineExprTree baseOp) 
	{
		this.baseOp = baseOp;
	}
	
	@Override
	@SuppressWarnings("unchecked")
	public void configure(Configuration settings) 
	{
		// Set base recombinator name
		try {
			// Base recombinator classname
			String baseOpClassname = 
				settings.getString("base-op[@type]");
			// Evaluator class
			Class<? extends IRecombineExprTree> baseOpClass = 
				(Class<? extends IRecombineExprTree>) Class.forName(baseOpClassname);
			// Evaluator instance
			IRecombineExprTree baseOp = baseOpClass.newInstance();
			// Configure species
			if (baseOp instanceof IConfigure) {
				((IConfigure) baseOp).configure(settings.subset("base-op"));
			}
			// Set species
			setBaseOp(baseOp);
		} 
		catch (ClassNotFoundException e) {
			throw new ConfigurationRuntimeException("Illegal operator classname");
		} 
		catch (InstantiationException e) {
			throw new ConfigurationRuntimeException("Problems creating an instance of operator", e);
		} 
		catch (IllegalAccessException e) {
			throw new ConfigurationRuntimeException("Problems creating an instance of operator", e);
		}
	}

	/////////////////////////////////////////////////////////////////
	// -------------------------------------------- Protected methods
	/////////////////////////////////////////////////////////////////

	// AbstractRecombinator methods

	@Override
	protected void setPpl() 
	{
		this.ppl = 2;
	}

	@Override
	protected void setSpl() 
	{
		this.spl = 2;
	}

	@Override
	protected void prepareRecombination() 
	{
		ISpecies spc = context.getSpecies();
		if (spc instanceof ExprTreeSpecies) {
			//  Assign species
			this.species = (ExprTreeSpecies) spc;
			// Sets genotype schema
			this.schema = ((ExprTreeSpecies) spc).getGenotypeSchema();
		}
		else {
			throw new IllegalStateException("Illegal species in context");
		}
	}

	@Override
	protected void recombineNext() 
	{
		// Parents genotypes
		ExprTree p0_genotype = 
			((ExprTreeIndividual) parentsBuffer.get(parentsCounter)).getGenotype();
		ExprTree p1_genotype = 
			((ExprTreeIndividual) parentsBuffer.get(parentsCounter+1)).getGenotype();
		// Sons genotypes
		ExprTree s0_genotype = new ExprTree(); 
		ExprTree s1_genotype = new ExprTree();
		// Fill sons
		baseOp.recombine(p0_genotype, p1_genotype, s0_genotype, s1_genotype, schema, randgen);
		// Add sons
		sonsBuffer.add(species.createIndividual(s0_genotype));
		sonsBuffer.add(species.createIndividual(s1_genotype));
	}
}
