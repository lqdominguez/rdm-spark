package net.sf.jclec.intarray.rec;

import net.sf.jclec.intarray.IntArrayIndividual;
import net.sf.jclec.intarray.IntArrayRecombinator;

/**
 * Two points crossover operator for IntArrayIndividual and its subclasses.
 * 
 * @author Sebastian Ventura
 */

public class TwoPointsCrossover extends IntArrayRecombinator
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------------------- Parameters
	/////////////////////////////////////////////////////////////////

	/** Generated by Eclipse */
	
	private static final long serialVersionUID = 3835150645048325173L;	
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////

	/**
	 * Empty constructor
	 */
	
	public TwoPointsCrossover() 
	{
		super();
	}

	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////

	// java.lang.Object methods

	@Override
	public boolean equals(Object other)
	{
		if (other instanceof TwoPointsCrossover) {
			return true;
		}
		else {
			return false;
		}
	}		

	/////////////////////////////////////////////////////////////////
	// -------------------------------------------- Protected methods
	/////////////////////////////////////////////////////////////////

	// AbstractRecombinator methods

	/**
	 * {@inheritDoc}
	 */

	@Override
	protected void recombineNext() 
	{
		// Genotype length
		int gl = species.getGenotypeLength();
		// Parents genotypes
		int [] p0_genome = 
			( (IntArrayIndividual) parentsBuffer.get(parentsCounter)).getGenotype();
		int [] p1_genome = 
			( (IntArrayIndividual) parentsBuffer.get(parentsCounter+1)).getGenotype();
		// Creating sons genotypes
		int [] s0_genome = new int[gl];
		int [] s1_genome = new int[gl];
		// Taking a crossover point
		int cp1, cp2;
		cp1 = randgen.choose(1, gl-2);
		cp2 = randgen.choose(cp1, gl-1);
		// First son
		System.arraycopy(p0_genome, 0,   s0_genome, 0,   cp1);
		System.arraycopy(p1_genome, cp1, s0_genome, cp1, cp2-cp1);
		System.arraycopy(p0_genome, cp2, s0_genome, cp2, gl-cp2);
		// Second son
		System.arraycopy(p1_genome, 0,   s1_genome, 0,   cp1);
		System.arraycopy(p0_genome, cp1, s1_genome, cp1, cp2-cp1);
		System.arraycopy(p1_genome, cp2, s1_genome, cp2, gl-cp2);
		// Put sons in s
		sonsBuffer.add(species.createIndividual(s0_genome));
		sonsBuffer.add(species.createIndividual(s1_genome));
	}
}
