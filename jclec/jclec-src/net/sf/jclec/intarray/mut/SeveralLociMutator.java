package net.sf.jclec.intarray.mut;

import net.sf.jclec.IConfigure;
import net.sf.jclec.intarray.IntArrayIndividual;
import net.sf.jclec.intarray.IntArrayMutator;

import org.apache.commons.configuration.Configuration;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * Several loci mutator for IntArrayIndividual and subclasses.
 * 
 * @author Sebastian Ventura
 */

public class SeveralLociMutator extends IntArrayMutator implements IConfigure
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------------------- Parameters
	/////////////////////////////////////////////////////////////////
	
	/** Generated by Eclipse */
	
	private static final long serialVersionUID = 3258415014955071027L;
	
	/////////////////////////////////////////////////////////////////
	// --------------------------------------------------- Properties
	/////////////////////////////////////////////////////////////////
	
	/** Number of mutation points */
	
	private int numberOfMutationPoints;
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------- Internal variables
	/////////////////////////////////////////////////////////////////
	
	/** Mutation points */
	
	private transient int [] mutationPoints;
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Empty constructor.
	 */
	
	public SeveralLociMutator() 
	{
		super();
	}

	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////
	
	// Setting and getting properties
	
	/**
	 * @return Number of loci to mutate
	 */
	
	public int getNumberOfMutationPoints() 
	{
		return numberOfMutationPoints;
	}

	/**
	 * Sets the number of loci to mutate
	 * 
	 * @param numberOfMutationPoints Number of mutation points
	 */
	
	public void setNumberOfMutationPoints(int numberOfMutationPoints) 
	{
		// Assigns nofmp
		this.numberOfMutationPoints = numberOfMutationPoints;
		// Allocate space for mp
		this.mutationPoints = new int[numberOfMutationPoints];		
	}

	// IConfigure interface

	/**
	 * Configuration method.
	 * 
	 * Configuration parameters for SeveralLociMutator are:
	 * 
	 * <ul>
	 * <li>
	 * <code>[@evaluate]: boolean (default = true)</code></p> 
	 * If this parameter is set to <code>true</true> individuals will
	 * be evaluated after its creation. 
	 * </li>
	 * <li>
	 * <code>[@number-of-mutation-points]: integer</code></p>
	 * Number of mutation points. 
	 * </li>
	 * <li>
	 * <code>random-generator: complex</code></p>
	 * Random generator used in individuals mutation.  
	 * <ul>
	 * 		<li>
	 * 		<code>random-generator[@type] String (default 'net.sf.jclec.random.Ranecu')</code>
	 * 		</li>
	 * </ul> 
	 * </li>
	 * </ul>
	 */
	
	public void configure(Configuration configuration) 
	{
		// Get the '[@number-of-mutation-points]' property
		int numberOfMutationPoints = configuration.getInt("[@number-of-mutation-points]");
		setNumberOfMutationPoints(numberOfMutationPoints);
	}

	// java.lang.Object methods

	@Override
	public boolean equals(Object other)
	{
		if (other instanceof SeveralLociMutator) {
			SeveralLociMutator o = (SeveralLociMutator) other;
			EqualsBuilder eb = new EqualsBuilder();
			eb.append(numberOfMutationPoints, o.numberOfMutationPoints);
			return eb.isEquals();
		}
		else {
			return false;
		}
	}
	
	@Override
	public String toString()
	{
		ToStringBuilder tsb = new ToStringBuilder(this);
		tsb.append(numberOfMutationPoints);
		return tsb.toString();
	}

	/////////////////////////////////////////////////////////////////
	// -------------------------------------------- Protected methods
	/////////////////////////////////////////////////////////////////

	// AbstractMutator methods
	
	/**
	 * {@inheritDoc}
	 */
	
	@Override
	protected void mutateNext() 
	{
		// Genome length
		int gl = species.getGenotypeLength();
		// Individual to be mutated
		IntArrayIndividual mutant = 
			(IntArrayIndividual) parentsBuffer.get(parentsCounter);
		// Creates mutant genotype
		int [] mgenome = new int[gl];
		System.arraycopy(mutant.getGenotype(), 0, mgenome, 0, gl);
		// Choose mutation point
		setMpoints();
		// Flip selected point
		for (int i=0; i<numberOfMutationPoints; i++)
			flip(mgenome, mutationPoints[i]);
		// Returns mutant
		sonsBuffer.add(species.createIndividual(mgenome));
	}

	/////////////////////////////////////////////////////////////////
	// ---------------------------------------------- Private methods
	/////////////////////////////////////////////////////////////////

	/**
	 * Set mutation points
	 * 
	 * @param gl Genotype length
	 */
	
	private final void setMpoints() 
	{
		int gl = species.getGenotypeLength();
		for (int i=0; i<numberOfMutationPoints; i++) {
			while(true){
				mutationPoints[i] = randgen.choose(0, gl);
				boolean exit = true;
				for (int j=0; j<i; j++) {
					if (mutationPoints[i] == mutationPoints[j]) {
						exit = false;
						break;
					}
				}
				if (exit) break;
			}
		}
	}	
}
