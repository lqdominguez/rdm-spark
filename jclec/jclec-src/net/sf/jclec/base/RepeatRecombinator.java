package net.sf.jclec.base;

import java.util.List;
import java.util.ArrayList;

import net.sf.jclec.ISystem;
import net.sf.jclec.IIndividual;

import org.apache.commons.configuration.Configuration;

import org.apache.commons.lang.builder.EqualsBuilder;

/**
 * Repeat recombinator.
 * 
 * Applies a recombinator several times over the same individual set. The number 
 * of repetitions is a configuration parameter.
 * 
 * @author Sebastian Ventura
 */

public class RepeatRecombinator extends DecoratedRecombinator 
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////

	/** Generated by Eclipse */
	
	private static final long serialVersionUID = 7926409688402274090L;
	
	/////////////////////////////////////////////////////////////////
	// --------------------------------------------------- Properties 
	/////////////////////////////////////////////////////////////////
	
	/** Number of repetitions */
	
	protected int numberOfRepetitions;
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors 
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Empty constructor.
	 */
	
	public RepeatRecombinator() 
	{
		super();
	}

	/**
	 * Empty constructor.
	 */
	
	public RepeatRecombinator(ISystem system) 
	{
		super(system);
	}

	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods 
	/////////////////////////////////////////////////////////////////
	
	// Setting and getting properties
	
	public final int getNumberOfRepetitions() 
	{
		return numberOfRepetitions;
	}

	public final void setNumberOfRepetitions(int numberOfRepetitions) 
	{
		this.numberOfRepetitions = numberOfRepetitions;
	}

	// IConfigure interface
	
	/**
	 * 
	 */
	
	public void configure(Configuration settings)
	{
		// Call super.configure() method
		super.configure(settings);
		// Set number of repetitions
		int numberOfRepetitions = settings.getInt("number-of-repetitions");
		setNumberOfRepetitions(numberOfRepetitions);
	}
	
	// IRecombine interface
	
	public List<IIndividual> recombine(List<IIndividual> parents) 
	{
		// Allocaet space for result
		ArrayList<IIndividual> result = new ArrayList<IIndividual>();
		// Performs decorated recombination k times
		for (int i=0; i<numberOfRepetitions; i++) {
			result.addAll(decorated.recombine(parents));
		}
		// Return result
		return result;
	}
	
	// java.lang.Object methods
	
	/**
	 * Compare decorated mutator and mutation probability.
	 * 
	 * {@inheritDoc} 
	 */
	
	public boolean equals(Object other)
	{
		if (other instanceof RepeatRecombinator) {
			RepeatRecombinator o = (RepeatRecombinator) other;
			EqualsBuilder eb = new EqualsBuilder();
			eb.append(decorated, o.decorated);
			eb.append(numberOfRepetitions, o.numberOfRepetitions);
			return eb.isEquals();
		}
		else {
			return false;
		}
	}
}
