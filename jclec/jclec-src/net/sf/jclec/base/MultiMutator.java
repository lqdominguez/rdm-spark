package net.sf.jclec.base;

import java.util.List;
import java.util.ArrayList;

import net.sf.jclec.ISystem;
import net.sf.jclec.IMutator;
import net.sf.jclec.IConfigure;
import net.sf.jclec.IIndividual;

import org.apache.commons.lang.builder.EqualsBuilder;

import org.apache.commons.configuration.Configuration;

/**
 * Multimutator. Apply several mutators over the same parents set.
 * 
 * @author Sebastian Ventura
 */

public class MultiMutator implements IMutator, IConfigure 
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////

	/** Generated by Eclipse */
	
	private static final long serialVersionUID = -6300502786816813015L;

	/////////////////////////////////////////////////////////////////
	// --------------------------------------------------- Properties
	/////////////////////////////////////////////////////////////////

	/** Component mutators */
	
	protected IMutator [] components;
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------- Internal variables
	/////////////////////////////////////////////////////////////////
	
	/** Execution context */
	
	protected transient ISystem context;
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////
	
	/** Empty constructor */
	
	public MultiMutator() 
	{
		super();
	}

	/**
	 * Constructor that sets execution context.
	 * 
	 * @param context Execution context
	 */
	
	public MultiMutator(ISystem context) 
	{
		super();
		contextualize(context);
	}

	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////

	// Setting and getting properties
	
	public final IMutator[] getComponents() 
	{
		return components;
	}

	public final void setComponents(IMutator[] components) 
	{
		// Assign components
		this.components = components;
		// Contextualize (if necessary)
		if (context != null) {
			for (IMutator component : components) component.contextualize(context);
		}
	}

	// IMutator interface
	
	/**
	 * {@inheritDoc}
	 */
	
	public void contextualize(ISystem context) 
	{
		// Set execution context
		this.context = context;
		// Contextualize components (if necessary)
		if (components != null) {
			for (IMutator component : components) component.contextualize(context);
		}
	}

	/**
	 * {@inheritDoc}
	 */
	
	public List<IIndividual> mutate(List<IIndividual> parents) 
	{
		// Allocate space for result
		ArrayList<IIndividual> result = new ArrayList<IIndividual> ();
		// Apply component mutators over parents and
		// add all mutated individuals to result
		for (IMutator component : components) {
			result.addAll(component.mutate(parents));
		}
		// Return result
		return result;
	}
	
	// IConfigure interface
	
	/**
	 * 
	 */
	
	@SuppressWarnings("unchecked")
	public void configure(Configuration settings)
	{
		// Number of mutator components
		int numberOfComponents = settings.getList("component[@type]").size();
		// Allocate space for components
		IMutator [] components = new IMutator[numberOfComponents];
		for (int i=0; i<numberOfComponents; i++) {
			// Header
			String header = "component("+i+")";
			try {
				// Component classname
				String componentClassname = settings.getString(header+"[@type");
				// Component class
				Class<IMutator> componentClass = 
					(Class<IMutator>) Class.forName(componentClassname);				
				// Component instance
				IMutator component = componentClass.newInstance();
				// Configure component (if necessary)
				if (component instanceof IConfigure) {
					((IConfigure) component).configure(settings.subset(header));
				}
			} 
			catch (ClassNotFoundException e) {
				e.printStackTrace();
			} 
			catch (InstantiationException e) {
				e.printStackTrace();
			} 
			catch (IllegalAccessException e) {
				e.printStackTrace();
			}
		}
		// Set components
		setComponents(components);
	}

	// java.lang.Object methods
	
	public boolean equals(Object other)
	{
		if (other instanceof MultiMutator) {
			MultiMutator o = (MultiMutator) other;
			int cl = components.length;
			if (cl == o.components.length) {
				EqualsBuilder eb = new EqualsBuilder();
				for (int i=0; i<cl; i++) 
					eb.append(components[i], o.components[i]);
				return eb.isEquals();
			}
			else {
				return false;
			}
		}
		else {
			return false;
		}
	}
}
