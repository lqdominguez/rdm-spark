package net.sf.jclec.base;

import java.util.List;
import java.util.ArrayList;

import net.sf.jclec.ISystem;
import net.sf.jclec.IIndividual;

import net.sf.jclec.util.random.IRandGen;

import org.apache.commons.configuration.Configuration;
import org.apache.commons.lang.builder.EqualsBuilder;

/**
 * Filtered mutator. Mutates individuals with a given mutation probability.
 * 
 * @author Sebastian Ventura
 */

public class FilteredMutator extends DecoratedMutator
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////
	
	/** Generated by Eclipse */
	
	private static final long serialVersionUID = 6949238978074907056L;

	/////////////////////////////////////////////////////////////////
	// --------------------------------------------------- Properties
	/////////////////////////////////////////////////////////////////

	/** Mutation probability */
	
	protected double mutProb;
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------- Internal variables
	/////////////////////////////////////////////////////////////////
	
	// Operator state
	
	/** Random generator */
	
	protected IRandGen randgen;
	
	// Operation variables
	
	/** Fertile parents set */
	
	protected transient List<IIndividual> fertile = new ArrayList<IIndividual> ();

	/** Sterile parents set */

	protected transient List<IIndividual> sterile = new ArrayList<IIndividual> ();
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////

	/**
	 * Empty constructor
	 */
	
	public FilteredMutator() 
	{
		super();
	}

	/**
	 * Constructor that contextualize this operator.
	 * 
	 * @param context Execution context
	 */
	
	public FilteredMutator(ISystem context) 
	{
		super();
		contextualize(context);
	}

	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////

	// Setting and getting properties

	/**
	 * Access to "mutProb" property.
	 * 
	 * @return Actual mutation probability
	 */
	
	public final double getMutProb() 
	{
		return mutProb;
	}

	/**
	 * Sets the "mutProb" property.
	 * 
	 * @param mutProb New mutation probability
	 */
	
	public final void setMutProb(double mutProb) 
	{
		this.mutProb = mutProb;
	}

	// IMutator interface
	
	/**
	 * Contextualize decorated mutator (if exists)
	 * 
	 * {@inheritDoc}
	 */
	
	@Override
	public void contextualize(ISystem context)
	{
		// Call super method
		super.contextualize(context);
		// Take a random generator
		randgen = context.createRandGen();
	}

	/**
	 * This operator perform ...
	 *  
	 */
	
	public List<IIndividual> mutate(List<IIndividual> parents) 
	{
		// Clear fertile and sterile sets
		fertile.clear();
		sterile.clear();
		// Build fertile and sterile sets
		for (IIndividual ind : parents) {
			if (randgen.coin(mutProb)) {
				fertile.add(ind);
			}
			else {
				sterile.add(ind);
			}
		}
		// Returns generated sons
		return decorated.mutate(fertile);
	}

	// Additional methods 
	
	/**
	 * Access to the sterile parents set.
	 * 
	 * @return Sterile parents set
	 */
	
	public List<IIndividual> getSterile()
	{
		return sterile;
	}

	/**
	 * Access to the fertile parents set.
	 * 
	 * @return Fertile parents set
	 */
	
	public List<IIndividual> getFertile()
	{
		return fertile;
	}
	
	// IConfigure interface

	public void configure(Configuration settings)
	{
		// Call super method
		super.configure(settings);
		// Get mutation probability
		double mutProb = settings.getDouble("mutation-prob", 0.05);
		setMutProb(mutProb);
	}

	// java.lang.Object methods
	
	/**
	 * Compare decorated mutator, mutation probability and randgen.
	 * 
	 * {@inheritDoc} 
	 */
	
	public boolean equals(Object other)
	{
		if (other instanceof FilteredMutator) {
			FilteredMutator o = (FilteredMutator) other;
			EqualsBuilder eb = new EqualsBuilder();
			eb.append(decorated, o.decorated);
			eb.append(mutProb, o.mutProb);
			return eb.isEquals();
		}
		else {
			return false;
		}
	}
}

/*
 * Los objetos FilteredMutator no mutan a todos los individuos que reciben 
 * a travs del mtodo mutate(), sino que actan sobre un porcentaje de ellos
 * (definido por la probabilidad de mutacin) elegidos al azar. Para ello, 
 * realizan en primer lugar un filtrado del conjunto recibido, pasando el
 * resultado de este filtrado al operador de mutacin que decoran. Como 
 * funcionalidad adicional, el operador proporciona dos mtodos, getSterile()
 * y getFertile(), que dan acceso a los dos conjuntos formados a partir del   
 * conjunto original (los que han originado nuevos individuos y los que no
 * han pasado al operador de mutacin)  
 */