package net.sf.jclec.selector;

import net.sf.jclec.selector.RouletteSelector;

import net.sf.jclec.IIndividual;
import net.sf.jclec.ISystem;
import net.sf.jclec.fitness.IValueFitness;

/*
 * Nombre: DisruptiveSelector
 * Autor: Rafael Ayllon Iglesias
 * Tipo: Clase publica
 * Extiende: La clase RouletteSelector 
 * Variables de la clase: serialVersionUID (generado por eclipse) 
 * Metodos: Protegidos: prepareSelection 
 *          Publicos: Ninguno
 * Objetivo de la clase: Esta clase pretende implementar el selector disruptivo,
 *                       con lo cual en esta clase en su metodo prepareSelection 
 *                       se inicianilaran los datos de la ruleta la cual se usara
 *                       para realizar la seleccion.
 * 
 */

/**
 * Disruptive selector.
 * 
 * @author Rafael Ayllon-Iglesias
 * @author Sebastian Ventura
 */

public class DisruptiveSelector extends RouletteSelector 
{
	/////////////////////////////////////////////////////////////////
	// -------------------------------------- Serialization constants
	/////////////////////////////////////////////////////////////////
	
	/** Generated by Eclipse */
	
	private static final long serialVersionUID = -422501366558313344L;

		
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Empty (default constructor).
	 */
	
	public DisruptiveSelector() 
	{
		super();
	}

	/**
	 * Constructor that contextualizes selector
	 * 
	 * @param context Execution context
	 */
	
	public DisruptiveSelector(ISystem context) 
	{
		super(context);
	}

	/////////////////////////////////////////////////////////////////
	// -------------------------------------------- Protected methods
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Nombre: prepareSelection 
	 * Autor: Rafael AyllA?n Iglesias.
	 * Tipo funcion: protegida
	 * Valores de entrada: Ninguno
	 * Valores de salida: Ninguno
	 * Funciones que utiliza: Ninguna
	 * Variables:- FitnessTotal es un double que almacena el fitness total
	 * 			 - mediaFitness es un double que almacena la media del fitness
	 * 			 - FitnessNormalizadoTotal es un double que almacena el fitness total normalizado
	 * 			 - mediaFitnessNormalizado es un double que almacena la media del fitness normalizado
	 * 			 - FitnessNormalizado es un double que almacena el fitnes normalizado
	 * 			 - acc es el acumulado de las partes de la ruleta
	 * 			 - idx es el indice de la ruleta
	 * Objetivo: Preparar las variables para la utilizacion de la ruleta
	 * 
	 */
	
	
	@Override
	protected void prepareSelection() 
	{
		// Allocates space for roulette
		if ((roulette == null) || (roulette.length != actsrcsz)) {
			roulette = new double[actsrcsz];
		}
		
		// Calculo datos
		double FitnessTotal=0.0;
		
		//Obtengo Aptitud total
		for (IIndividual ind : actsrc) {
			// Fitness value for actual individual
			FitnessTotal += ((IValueFitness) ind.getFitness()).getValue();						
		}
		
		double mediaFitness= FitnessTotal / actsrcsz;
		
		double FitnessNormalizadoTotal=0.0;
		
		// Obtengo Aptitud total normalizada
		for (IIndividual ind : actsrc) {
			// Fitness value for actual individual
            double val = ((IValueFitness) ind.getFitness()).getValue();
			
			FitnessNormalizadoTotal  += Math.abs(val - mediaFitness);						
		}
		
		double mediaFitnessNormalizado= FitnessNormalizadoTotal / actsrcsz;		
				
		// Sets roulette values		
		double acc = 0.0; int idx = 0;
		for (IIndividual ind : actsrc) {
			// Fitness value for actual individual
			double val = ((IValueFitness) ind.getFitness()).getValue();
			
			double FitnessNormalizado = Math.abs(val - mediaFitness);
			
			// Calculate 
			val = FitnessNormalizado / mediaFitnessNormalizado;
			
			// Update acc 
			acc += val;
			// Set roulette value
			roulette[idx++] = acc;
		}
			
		// Normalize roulette values
		for ( ; idx > 0;) {
			roulette[--idx] /= acc;
		}
	}
}