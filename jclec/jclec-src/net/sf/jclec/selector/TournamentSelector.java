package net.sf.jclec.selector;

import java.util.Comparator;

import net.sf.jclec.ISystem;
import net.sf.jclec.IFitness;
import net.sf.jclec.IConfigure;
import net.sf.jclec.IIndividual;

import org.apache.commons.configuration.Configuration;

import org.apache.commons.lang.builder.EqualsBuilder;

/**
 * Tournament selector.
 * 
 * @author Sebastian Ventura
 */

public class TournamentSelector extends StochasticSelector implements IConfigure
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////
	
	/** Generated by Eclipse */
	
	private static final long serialVersionUID = -8077322230229976289L;
	
	/////////////////////////////////////////////////////////////////
	// --------------------------------------------------- Properties
	/////////////////////////////////////////////////////////////////
	
	/** Tournament size */
	
	protected int tournamentSize;
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------- Internal variables
	/////////////////////////////////////////////////////////////////
	
	/** Compare individuals by its fitnesses */
	
	protected transient Comparator<IIndividual> individualsComparator = 
		new Comparator<IIndividual> () 
		{

			public int compare(IIndividual ind0, IIndividual ind1) 
			{
				return fitnessComparator.compare(ind0.getFitness(), ind1.getFitness());
			}		
		};
	
	/** Fitnesses comparator */
	
	protected transient Comparator<IFitness> fitnessComparator;
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////
	
	public TournamentSelector() 
	{
		super();
	}

	/**
	 * Constructor that contextualize selector
	 * 
	 * @param context Execution context
	 */
	
	public TournamentSelector(ISystem context) 
	{
		super(context);
	}

	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////

	// Setting and getting properties
	
	public final int getTournamentSize() 
	{
		return tournamentSize;
	}

	public final void setTournamentSize(int tournamentSize) 
	{
		this.tournamentSize = tournamentSize;
	}

	// IConfigure interface
	
	/**
	 * Configuration parameters for StochasticSelector are:
	 * 
	 * <ul>
	 * <li>
	 * <code>random-generator: complex</code></p>
	 * Random generator used in individuals selection.  
	 * <ul>
	 * 		<li>
	 * 		<code>random-generator[@type] String (default 'net.sf.jclec.random.Ranecu')</code>
	 * 		</li>
	 * </ul> 	 * 
	 * </li>
	 * <li>
	 * <code>tournament-size: integer (default 2)</code>
	 * </li>
	 * </ul>
	 */
	
	public void configure(Configuration settings)
	{
		// Get tournament-size
		int tournamentSize = settings.getInt("tournament-size", 2);
		setTournamentSize(tournamentSize);
	}

	// java.lang.Object methods

	@Override
	public boolean equals(Object other) 
	{
		if (other instanceof TournamentSelector) {
			TournamentSelector o = (TournamentSelector) other;
			EqualsBuilder eb = new EqualsBuilder();
			eb.append(tournamentSize, o.tournamentSize);
			return eb.isEquals();
		}
		else {
			return false;
		}
	}

	/////////////////////////////////////////////////////////////////
	// -------------------------------------------- Protected methods
	/////////////////////////////////////////////////////////////////
	
	// AbstractSelector methods
	
	/**
	 * Sets fitness comparator
	 */
	
	@Override
	protected void prepareSelection() 
	{
		this.fitnessComparator = context.getEvaluator().getComparator();
	}

	/**
	 * Select an individual at random; then, performs tournament with
	 * (tournamentSize-1) individuals. Tournament winner is returned.
	 * 
	 * {@inheritDoc} 
	 */
	
	@Override
	protected IIndividual selectNext() 
	{
		// Randomly selected individual
		IIndividual winner = actsrc.get(randgen.choose(0, actsrcsz));
		// Performs tournament
		for (int j=1; j<tournamentSize; j++) {
			IIndividual opponent = actsrc.get(randgen.choose(0, actsrcsz));
			if(individualsComparator.compare(winner, opponent) == -1)
				winner = opponent;
		}
		// Returns tournament winner
		return winner;
	}	
}
