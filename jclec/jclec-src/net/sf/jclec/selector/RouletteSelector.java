package net.sf.jclec.selector;

import net.sf.jclec.IIndividual;
import net.sf.jclec.ISystem;

import net.sf.jclec.fitness.IValueFitness;

import org.apache.commons.lang.builder.EqualsBuilder;

/**
 * Roulette selector.
 * 
 * @author Sebastian Ventura
 */

public class RouletteSelector extends StochasticSelector
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////

	/** Generated by Eclipse */
	
	private static final long serialVersionUID = -7486679623259737868L;

	/////////////////////////////////////////////////////////////////
	// ------------------------------------------- Internal variables
	/////////////////////////////////////////////////////////////////
	
	/** Roulette */
	
	protected transient double [] roulette;
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////

	/**
	 * Empty constructor
	 */
	
	public RouletteSelector() 
	{
		super();
	}

	/**
	 * Empty constructor
	 */
	
	public RouletteSelector(ISystem context) 
	{
		super(context);
	}

	/////////////////////////////////////////////////////////////////
	// ------------------------- Overwriting AbstractSelector methods
	/////////////////////////////////////////////////////////////////	
	
	/**
	 * This  method build the  roulette before start the selection of
	 * individuals.
	 */
	
	@Override
	protected void prepareSelection() 
	{
		// Allocates space for roulette
		if ((roulette == null) || (roulette.length != actsrcsz)) {
			roulette = new double[actsrcsz];
		}
		// Sets roulette values
		double acc = 0.0; int idx = 0;
		for (IIndividual ind : actsrc) {			
			acc += ((IValueFitness) ind.getFitness()).getValue();
			roulette[idx++] = acc;
		}
		// Normalize roulette values
		for ( ; idx > 0;) {
			if(acc != 0)
				roulette[--idx] /= acc;
			else
				--idx;
		}
	}

	/**
	 * Selects an individual...
	 * 
	 * @return Selected individual
	 */
	
	@Override
	protected IIndividual selectNext() 
	{	
		// Generamos un valor al azar
		double value = randgen.raw();
		// Selects individual 
		for (int i=0; i<actsrcsz; i++) {
			if (value < roulette[i]) {
				return actsrc.get(i);
			}
		}
		// This point should never be reached
		return actsrc.get(randgen.choose(0, roulette.length-1));
	}	

	/*
	 * El mitodo actza de la siguiente forma:
	 * 
	 * 1) Seleccionamos un valor aleatorio en el rango [0,1)
	 * 2) Valor explorando la ruleta, hasta que el valor es menor
	 *    que el contenido en una de sus posiciones. Llegados a
	 *    este punto, devolvemos el elemento del conjunto fuente 
	 *    cuya posicisn coincide con la posicisn i-isima 
	 */
	
	/////////////////////////////////////////////////////////////////
	// ------------------------- Overwriting java.lang.Object methods
	/////////////////////////////////////////////////////////////////

	@Override
	public boolean equals(Object other) 
	{
		if (other instanceof RouletteSelector) {
			RouletteSelector o = (RouletteSelector) other;
			EqualsBuilder eb = new EqualsBuilder();
			eb.append(randgen, o.randgen);
			return eb.isEquals();
		}
		else {
			return false;
		}
	}	
}
