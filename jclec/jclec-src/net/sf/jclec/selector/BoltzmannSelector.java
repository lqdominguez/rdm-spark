package net.sf.jclec.selector;

import net.sf.jclec.ISystem;
import net.sf.jclec.IConfigure;
import net.sf.jclec.IIndividual;

import net.sf.jclec.fitness.IValueFitness;

import org.apache.commons.configuration.Configuration;

import org.apache.commons.lang.builder.EqualsBuilder;

/**
 * Boltzmann Selector.
 * 
 * @author Sebastian Ventura 
 */

public class BoltzmannSelector extends RouletteSelector implements IConfigure
{
	/////////////////////////////////////////////////////////////////
	// -------------------------------------- Serialization constants
	/////////////////////////////////////////////////////////////////
	
	/** Generated by Eclipse */
	
	private static final long serialVersionUID = -422501366558313344L;

	/////////////////////////////////////////////////////////////////
	// --------------------------------------------------- Properties
	/////////////////////////////////////////////////////////////////
	
	/** Start temperature value */
	
	private double initialTemp;

	/** Used in temparature update */
	
	private double tempDecr;
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------- Internal variables
	/////////////////////////////////////////////////////////////////
		
	/** Actual temperature value */
	
	private double actualTemp;
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Empty (default constructor).
	 */
	
	public BoltzmannSelector() 
	{
		super();
	}

	/**
	 * Constructor that contextualize selector
	 * 
	 * @param context Execution context
	 */
	
	public BoltzmannSelector(ISystem context) 
	{
		super(context);
	}

	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////
	
	// Setting and getting properties
	
	/**
	 * Access to initial temperature.
	 * 
	 * @return Initial temperature
	 */
	
	public double getInitialTemp() 
	{
		return initialTemp;
	}

	/**
	 * Sets initial temperature
	 * 
	 * @param initialTemp Initial temperature value
	 */
	
	public void setInitialTemp(double initialTemp) 
	{
		this.initialTemp = initialTemp;
		this.actualTemp  = initialTemp;
	}

	/**
	 * Acceso to temperature decrement constant.
	 * 
	 * @return Decrement temperature constant
	 */
	
	public double getTempDecr() 
	{
		return tempDecr;
	}

	/**
	 * Set decrement temperature constant
	 * 
	 * @param tempDecr New temperature decrement constant
	 */
	
	public void setTempDecr(double tempDecr) 
	{
		this.tempDecr = tempDecr;
	}

	// IConfigure interface
	
	/**
	 * {@inheritDoc}
	 */
	
	public void configure(Configuration configuration)
	{
		// Set initialTemp
		double initialTemp = configuration.getDouble("initial-temp");
		setInitialTemp(initialTemp);
		// Set tempDecr
		double tempDecr = configuration.getDouble("temp-decr");
		setTempDecr(tempDecr);		
	}
	
	// java.lang.Object
	
	@Override
	public boolean equals(Object other) 
	{
		if (other instanceof BoltzmannSelector) {
			BoltzmannSelector o = (BoltzmannSelector) other;
			EqualsBuilder eb = new EqualsBuilder();
			eb.append(initialTemp, o.initialTemp);
			eb.append(tempDecr, o.tempDecr);
			return eb.isEquals();
		}
		else {
			return false;
		}
	}	
	
	/////////////////////////////////////////////////////////////////
	// -------------------------------------------- Protected methods
	/////////////////////////////////////////////////////////////////
	
	// AbstractSelector methods
	
	/**
	 * This phase performs ...
	 * 
	 * <ol>
	 * <li>Update temperature</li>
	 * <li>Set roulette values as exp(fitness/T)</li>
	 * <li>Normalize roulette value</li>
	 * </ol>
	 * 
	 * {@inheritDoc} 
	 */
	
	@Override
	protected void prepareSelection() 
	{
		// Update temperature
		updateTemperature();
		// Allocates space for roulette
		if ((roulette == null) || (roulette.length != actsrcsz)) {
			roulette = new double[actsrcsz];
		}
		// Sets roulette values
		double acc = 0.0; int idx = 0;
		for (IIndividual ind : actsrc) {
			// Fitness value for actual individual
			double val = ((IValueFitness) ind.getFitness()).getValue();
			// Calculate exp(fitness/T)
			val = Math.exp(val/actualTemp);
			// Update acc 
			acc += val;
			// Set roulette value
			roulette[idx++] = acc;
		}
		// Normalize roulette values
		for ( ; idx > 0;) {
			roulette[--idx] /= acc;
		}
	}	
	
	// Internal methods
	
	/**
	 * Update temperature
	 */
	
	protected final void updateTemperature()
	{
		actualTemp = actualTemp*tempDecr;
	}
}
