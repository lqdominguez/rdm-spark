package net.sf.jclec.realarray.rec;

import org.apache.commons.configuration.Configuration;

import org.apache.commons.lang.builder.EqualsBuilder;


/**
 * Arithmetic crossover for RealArrayIndividual and its subclasses
 * 
 * @author Alberto Lamarca 
 * @author Sebastian Ventura 
 */

public class ArithmeticCrossover extends UniformCrossover2x2
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////
	
	/** Generated by eclipse */
	
	private static final long serialVersionUID = -6654540764816675120L;

	/////////////////////////////////////////////////////////////////
	// --------------------------------------------------- Properties
	/////////////////////////////////////////////////////////////////
	
	/** Lambda parameter */
	
	protected double lambda;

	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Empty constructor
	 */
	
	public ArithmeticCrossover() 
	{
		super();
	}

	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////

	// Setting and getting properties

	/**
	 * @return Returns the lambda.
	 */
	
	public double getLambda() 
	{
		return lambda;
	}

	/**
	 * @param lambda The lambda to set.
	 */
	
	public void setLambda(double lambda) 
	{
		this.lambda = lambda;
	}
	
	// IConfigure interface
	
	@Override
	public void configure(Configuration settings)
	{
		// Call super.configure() method
		super.configure(settings);
		// Set lambda parameter
		double lambda = settings.getDouble("[@lambda]", 0.8);
		setLambda(lambda);
	}

	// java.lang.Object methods
	
	public boolean equals(Object other)
	{
		if (other instanceof ArithmeticCrossover) {
			ArithmeticCrossover o = (ArithmeticCrossover) other;
			EqualsBuilder eb = new EqualsBuilder();
			eb.append(locusRecProb, o.locusRecProb);
			eb.append(lambda, o.lambda);
			return eb.isEquals();
		}
		else {
			return false;
		}
	}	
	
	/////////////////////////////////////////////////////////////////
	// -------------------------------------------- Protected methods
	/////////////////////////////////////////////////////////////////
	
	// UniformCrossover methods
	
	@Override
	protected void recombineLocus(double[] p0_genome, double[] p1_genome, double[] s0_genome, double[] s1_genome, int locusIndex) 
	{
		s0_genome[locusIndex]= lambda * p0_genome[locusIndex] + (1-lambda)* p1_genome[locusIndex];
		s1_genome[locusIndex]= lambda * p1_genome[locusIndex] + (1-lambda)* p0_genome[locusIndex];
	}

	@Override
	protected double defaultLocusRecProb() 
	{
		return 0.5;
	}
}
