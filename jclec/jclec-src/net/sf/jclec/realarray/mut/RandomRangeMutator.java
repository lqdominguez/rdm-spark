package net.sf.jclec.realarray.mut;

import net.sf.jclec.realarray.UniformMutator;

import org.apache.commons.configuration.Configuration;
import org.apache.commons.lang.builder.EqualsBuilder;

/**
 * RandomRange mutator.
 * 
 * This mutator applies on each selected individual a random mutation , that is, 
 * the locus value changes randomly. This value is inside of the locus interval.
 *
 * @author Alberto Lamarca
 * @author Sebastian Ventura
 */

public class RandomRangeMutator extends UniformMutator 
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////
	
	/** Generated by eclipse */

	private static final long serialVersionUID = 6674358495153190338L;

	/////////////////////////////////////////////////////////////////
	// --------------------------------------------------- Properties
	/////////////////////////////////////////////////////////////////
	
	/** Interval value */
	
	protected double interval;
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Empty constructor
	 */
	
	public RandomRangeMutator() 
	{
		super();
	}
	
	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////

	// Setting and getting properties

	/**
	 * @return Returns the interval
	 */
	
	public double getInterval() 
	{
		return interval;
	}
	
	/**
	 * @param interval Interval to set.
	 */
	
	public void setInterval(double interval) 
	{
		this.interval = interval;
	}
	
	// IConfigure interface

	/**
	 * 
	 */
	
	@Override
	public void configure(Configuration settings)
	{
		// Call super.configuration() method
		super.configure(settings);
		// Set interval value
		double interval = settings.getDouble("[@interval]", 2.0);
		setInterval(interval);
	}

	// java.lang.Object methods

	public boolean equals(Object other)
	{
		if (other instanceof RandomRangeMutator) {
			RandomRangeMutator o = (RandomRangeMutator) other;
			EqualsBuilder eb = new EqualsBuilder();
			eb.append(interval, o.interval);
			eb.append(locusMutProb, o.locusMutProb);
			return eb.isEquals();
		}
		else {
			return false;
		}
	}		

	/////////////////////////////////////////////////////////////////
	// -------------------------------------------- Protected methods
	/////////////////////////////////////////////////////////////////

	// AbstractMutator methods

	/**
	 * {@inheritDoc}
	 */
	
	@Override
	protected double defaultLocusMutProb() 
	{
		return 0.6;
	}

	/**
	 * {@inheritDoc}
	 */
	
	@Override
	protected void doLocusMutation(double[] parentChromosome, double[] mutantChromosome, int locusIndex) 
	{
		// Set new locus value for mutant
		double newValue = 
			parentChromosome[locusIndex] + randgen.uniform(-interval, interval);			
		// Checking mutant value
		mutantChromosome[locusIndex] = genotypeSchema[locusIndex].nearestOf(newValue);		
	}
}
