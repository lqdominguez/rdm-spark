package net.sf.jclec.realarray.mut;

import net.sf.jclec.realarray.UniformMutator;

import org.apache.commons.configuration.Configuration;

import org.apache.commons.lang.builder.EqualsBuilder;

/** 
 * Apply Muhlenbein mutator defined by The Breeder Genetic Algorithm.
 *
 * @author Alberto Lamarca 
 * @author Sebastian Ventura 
 */

public class MuhlenbeinMutator extends UniformMutator
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////

	/** Generated by eclipse */
	
	private static final long serialVersionUID = -3059929043243398240L;

	/////////////////////////////////////////////////////////////////
	// --------------------------------------------------- Properties
	/////////////////////////////////////////////////////////////////
	
	/** Mutation range */
	
	protected double mutationRange;

	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Empty constructor
	 */
	public MuhlenbeinMutator() 
	{
		super();
	}
	
	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////

	// Setting and getting properties

	/**
	 * @return Returns Mutation range
	 */
	
	public double getMutationRange() 
	{
		return mutationRange;
	}
	
	/**
	 * @param mutationRange Mutation range to set.
	 */
	
	public void setMutationRange(double mutationRange) 
	{
		this.mutationRange = mutationRange;
	}
	
	// IConfigure interface

	/**
	 * 
	 */
	
	@Override
	public void configure(Configuration settings)
	{
		// Call super.configure() method
		super.configure(settings);
		// Init mutationRange parameter
		double mutationRange = settings.getDouble("[@mutation-range]", 0.1);
		setMutationRange(mutationRange);
	}
	
	// java.lang.Object methods

	public boolean equals(Object other)
	{
		if (other instanceof MuhlenbeinMutator) {
			MuhlenbeinMutator o = (MuhlenbeinMutator) other;
			EqualsBuilder eb = new EqualsBuilder();
			eb.append(locusMutProb, o.locusMutProb);
			eb.append(mutationRange, o.mutationRange);
			return eb.isEquals();
		}
		else {
			return false;
		}
	}	

	/////////////////////////////////////////////////////////////////
	// -------------------------------------------- Protected methods
	/////////////////////////////////////////////////////////////////
	
	// UniformMutator methods
	
	/**
	 * {@inheritDoc}
	 */

	@Override
	protected double defaultLocusMutProb() 
	{
		return 0.05;
	}
	
	/**
	 * {@inheritDoc}
	 */
	
	@Override
	protected void doLocusMutation(double[] parentChromosome, double[] mutantChromosome, int locusIndex) 
	{
		double rang = mutationRange * genotypeSchema[locusIndex].efWidth();
		double gamma = 0;
		for (int k=0 ; k<=15;k++) {
			gamma += ((randgen.raw() < 0.0625)?1:0) * Math.pow(2,-k);
		}
		if (randgen.coin()) {
			mutantChromosome[locusIndex] = 
				parentChromosome[locusIndex] + rang*gamma;
		}
		else {
			mutantChromosome[locusIndex] = 
				parentChromosome[locusIndex] - rang*gamma;
		}
		//	Check the locus interval
		mutantChromosome[locusIndex] = 
			genotypeSchema[locusIndex].nearestOf(mutantChromosome[locusIndex]);						
	}
}
