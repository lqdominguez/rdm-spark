package net.sf.jclec.realarray;

import net.sf.jclec.IConfigure;
import net.sf.jclec.util.range.IRange;


import org.apache.commons.configuration.Configuration;
import org.apache.commons.configuration.ConfigurationRuntimeException;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * RealArrayIndividual species
 * 
 * @author Sebastian Ventura 
 */

public class RealArrayIndividualSpecies extends RealArraySpecies implements IConfigure 
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////

	/** Generated by Eclipse */
	
	private static final long serialVersionUID = -7949495150686741289L;

	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Empty constructor
	 */
	
	public RealArrayIndividualSpecies() 
	{
		super();
	}

	/**
	 * Constructor that sets genotype schema.
	 * 
	 * @param genotypeSchema Genotype schema
	 */
	
	public RealArrayIndividualSpecies(IRange [] genotypeSchema) 
	{
		super();
		setGenotypeSchema(genotypeSchema);
	}
	
	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////
	
	// Setting properties
	
	/**
	 * Set genotype schema for this species
	 * 
	 * @param genotypeSchema Genotype schema
	 */
	
	public void setGenotypeSchema(IRange [] genotypeSchema)
	{
		this.genotypeSchema = genotypeSchema;
	}
	
	// IRealArrayIndividualSpecies interface
	
	/**
	 * Creates a RealArrayIndividual
	 * 
	 * @return new RealArrayIndividual individual
	 */
	
	public RealArrayIndividual createIndividual() 
	{
		return new RealArrayIndividual();
	}

	/**
	 * {@inheritDoc}
	 */
	
	public RealArrayIndividual createIndividual(double[] genotype) 
	{
		return new RealArrayIndividual(genotype);
	}
	
	// IConfigure interface
	
	/**
	 * 
	 */
	
	public void configure(Configuration settings) 
	{
		// Genotype lenght
		int genotypeLength = 
			settings.getList("genotype-schema.locus[@type]").size();
		// Genotype schema
		IRange [] genotypeSchema = new IRange[genotypeLength];
		// Set genotype schema components
		for (int i=0; i<genotypeLength; i++) {
			// Get component classname
			String componentClassname = 
				settings.getString("genotype-schema.locus("+i+")[@type]");
			try {
				Class<?> componentClass = 
					Class.forName(componentClassname);
				// Set schema component
				genotypeSchema[i] = 
					(IRange) componentClass.newInstance();
				// Configure component
				if (genotypeSchema[i] instanceof IConfigure) {
					((IConfigure) genotypeSchema[i]).configure
						(settings.subset("genotype-schema.locus("+i+")"));
				}
			}
			catch(ClassNotFoundException e) {
				throw new ConfigurationRuntimeException("Illegal schema element classname");
			}
			catch(IllegalAccessException e) {
				throw new ConfigurationRuntimeException("Problems creating an instance of schema element", e);
			}
			catch(InstantiationException e) {
				throw new ConfigurationRuntimeException("Problems creating an instance of schema element", e);				
			}			
		}
		// Assign genotype schema
		setGenotypeSchema(genotypeSchema);
	}	

	// java.lang.Object methods
	
	/**
	 * {@inheritDoc}
	 */
	
	public String toString()
	{
		// Performs Schema rendering
		ToStringBuilder tsb = new ToStringBuilder(this);
		// Append schema
		tsb.append("schema", genotypeSchema);
		// Returns rendered schema
		return tsb.toString();
	}
	
	/**
	 * {@inheritDoc}
	 */
	
	public boolean equals(Object other)
	{
		if (other instanceof RealArrayIndividualSpecies) {
			EqualsBuilder eb = new EqualsBuilder();
			RealArrayIndividualSpecies raoth = (RealArrayIndividualSpecies) other;
			eb.append(this.genotypeSchema, raoth.genotypeSchema);
			return eb.isEquals();
		}
		else {
			return false;
		}
	}
}
